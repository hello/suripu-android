import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://download.crashlytics.com/maven' }
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:2.5.0'
        //noinspection GradleDynamicVersion
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

apply plugin: 'me.tatarka.retrolambda'

def generateVersionCode() {
    def now = new Date()
    def formatter = new SimpleDateFormat("yyMMddHH")
    Integer.parseInt(formatter.format(now))
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "is.hello.sense"
        minSdkVersion 18
        targetSdkVersion 21
        versionCode generateVersionCode()
        versionName "1.0.3"

        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"
    }
    signingConfigs {
        debug {
            storeFile file("../../Hello-Android-Internal.keystore")
        }
        release {
            storeFile file("../../Hello-Android-Release.keystore")
            storePassword "hellogoodbye"
            keyAlias "suripu"
            keyPassword "hellogoodbye"
        }
    }
    buildTypes {
        def TYPE_INT = "int"
        def TYPE_BOOLEAN = "boolean"
        def TYPE_STRING = "String"

        def MIN_LOGGING_LEVEL = "MIN_LOGGING_LEVEL"
        def DEBUG_SCREEN_ENABLED = "DEBUG_SCREEN_ENABLED"
        def CLEAR_LOG_ON_START = "CLEAR_LOG_ON_START"
        def CLIENT_ID = "CLIENT_ID"
        def CLIENT_SECRET = "CLIENT_SECRET"
        def BASE_URL = "BASE_URL"
        def SUPPORT_AUTHORITY = "SUPPORT_AUTHORITY"
        def MP_API_KEY = "MP_API_KEY"
        def HOCKEY_API_KEY = "HOCKEY_API_KEY"

        def TRUE = "true"
        def FALSE = "false"


        debug {
            def TARGET_STAGING = false

            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.VERBOSE"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, TRUE
            buildConfigField TYPE_BOOLEAN, CLEAR_LOG_ON_START, FALSE
            if (TARGET_STAGING) {
                buildConfigField TYPE_STRING, CLIENT_ID, '"' + "android_dev" + '"'
                buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "99999secret" + '"'
                buildConfigField TYPE_STRING, BASE_URL, '"' + "https://dev-api.hello.is/v1" + '"'
            } else {
                buildConfigField TYPE_STRING, CLIENT_ID, '"' + "8d3c1664-05ae-47e4-bcdb-477489590aa4" + '"'
                buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "4f771f6f-5c10-4104-bbc6-3333f5b11bf9" + '"'
                buildConfigField TYPE_STRING, BASE_URL, '"' + "https://api.hello.is/v1" + '"'
            }
            buildConfigField TYPE_STRING, SUPPORT_AUTHORITY, '"' + "staging-user.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "d62a169fe4856dea26f3a322750613a8" + '"'
            buildConfigField TYPE_STRING, HOCKEY_API_KEY, '"' + "805427569ce2035dcda0b99e4d984256" + '"'

            signingConfig signingConfigs.debug

            applicationIdSuffix ".debug"
            minifyEnabled false // when we hit the 0xffff method limit, switch this to true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
        beta {
            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.VERBOSE"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, TRUE
            buildConfigField TYPE_BOOLEAN, CLEAR_LOG_ON_START, FALSE
            buildConfigField TYPE_STRING, CLIENT_ID, '"' + "8d3c1664-05ae-47e4-bcdb-477489590aa4" + '"'
            buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "4f771f6f-5c10-4104-bbc6-3333f5b11bf9" + '"'
            buildConfigField TYPE_STRING, BASE_URL, '"' + "https://api.hello.is/v1" + '"'
            buildConfigField TYPE_STRING, SUPPORT_AUTHORITY, '"' + "staging-user.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "d62a169fe4856dea26f3a322750613a8" + '"'
            buildConfigField TYPE_STRING, HOCKEY_API_KEY, '"' + "43c61cc553f0ccf2b3e1f73bc30bbfb4" + '"'

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
        store {
            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.ERROR"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, FALSE
            buildConfigField TYPE_BOOLEAN, CLEAR_LOG_ON_START, TRUE
            buildConfigField TYPE_STRING, CLIENT_ID, '"' + "8d3c1664-05ae-47e4-bcdb-477489590aa4" + '"'
            buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "4f771f6f-5c10-4104-bbc6-3333f5b11bf9" + '"'
            buildConfigField TYPE_STRING, BASE_URL, '"' + "https://api.hello.is/v1" + '"'
            buildConfigField TYPE_STRING, SUPPORT_AUTHORITY, '"' + "guide.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "43c61cc553f0ccf2b3e1f73bc30bbfb4" + '"'

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE'
        exclude 'LICENSE.txt'
    }
}

retrolambda {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine "/usr/libexec/java_home", "-v", "1.8"
        standardOutput = stdout
    }
    jdk "$stdout".trim()
}

dependencies {
    // Is there anything we don't depend on?

    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup.dagger:dagger:1.2.2'

    compile 'io.reactivex:rxjava:1.0.0'
    compile 'io.reactivex:rxandroid:0.23.0'

    compile 'com.squareup.retrofit:retrofit:1.8.0'
    compile 'com.squareup.retrofit:converter-jackson:1.8.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.1.0'
    compile 'com.squareup.okhttp:okhttp:2.1.0'

    compile 'com.fasterxml.jackson.core:jackson-databind:2.4.3'
    compile 'com.fasterxml.jackson.core:jackson-core:2.4.3'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.4.2'
    compile('com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.3') {
        // We use a special distribution of joda-time which is packaged
        // for Android, it conflicts with the joda-time imported by this
        // dependency. Goodbye dependency's joda-time.
        exclude group: 'joda-time'
    }

    compile 'net.danlew:android.joda:2.7.1'
    compile "com.mixpanel.android:mixpanel-android:4.4.1@aar"
    compile 'com.google.protobuf:protobuf-java:2.5.0'

    compile 'com.android.support:support-v4:21.0.3'
    compile 'com.android.support:support-v13:21.0.3'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    //noinspection GradleDynamicVersion
    compile 'com.google.android.gms:play-services-base:6.5.+'
    //noinspection GradleDynamicVersion
    compile 'com.google.android.gms:play-services-location:6.5.+'

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.squareup:seismic:1.0.1'

    debugCompile 'net.hockeyapp.android:HockeySDK:3.5.0'
    betaCompile 'net.hockeyapp.android:HockeySDK:3.5.0'

    androidTestCompile ('com.jakewharton.espresso:espresso:1.1-r3') {
        exclude group: 'com.squareup.dagger', module: 'dagger'
        exclude group: 'org.hamcrest', module: 'hamcrest-integration'
    }

    //noinspection GradleDynamicVersion
    compile 'com.crashlytics.android:crashlytics:1.+'
}
