import java.text.SimpleDateFormat

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.jakewharton.sdkmanager:gradle-plugin:0.12.0'
        classpath 'me.tatarka:gradle-retrolambda:3.2.1'
    }
}

apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

repositories {
    maven { url 'https://zendesk.artifactoryonline.com/zendesk/repo' }
}


def generateVersionCode() {
    def now = new Date()
    def formatter = new SimpleDateFormat("yyMMddHH")
    Integer.parseInt(formatter.format(now))
}

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "is.hello.sense"
        minSdkVersion 18
        targetSdkVersion 22
        versionCode generateVersionCode()
        versionName "1.1.8"
    }
    signingConfigs {
        debug {
            def keyStore = file("../../Hello-Android-Internal.keystore")
            if (keyStore.exists()) {
                storeFile file("../../Hello-Android-Internal.keystore")
            } else {
                logger.warn("Could not find internal keystore, ignoring.")
            }
        }
        release {
            storeFile file("../../Hello-Android-Release.keystore")
            storePassword "hellogoodbye"
            keyAlias "suripu"
            keyPassword "hellogoodbye"
        }
    }
    buildTypes {
        def TYPE_INT = "int"
        def TYPE_BOOLEAN = "boolean"
        def TYPE_STRING = "String"

        def MIN_LOGGING_LEVEL = "MIN_LOGGING_LEVEL"
        def DEBUG_SCREEN_ENABLED = "DEBUG_SCREEN_ENABLED"
        def CLIENT_ID = "CLIENT_ID"
        def CLIENT_SECRET = "CLIENT_SECRET"
        def BASE_URL = "BASE_URL"
        def MP_API_KEY = "MP_API_KEY"
        def HOCKEY_API_KEY = "HOCKEY_API_KEY"
        def IS_BETA = "IS_BETA"

        def TRUE = "true"
        def FALSE = "false"


        debug {
            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.VERBOSE"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, TRUE
            buildConfigField TYPE_STRING, CLIENT_ID, '"' + "android_dev" + '"'
            buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "99999secret" + '"'
            buildConfigField TYPE_STRING, BASE_URL, '"' + "https://dev-api.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "d62a169fe4856dea26f3a322750613a8" + '"'
            buildConfigField TYPE_STRING, HOCKEY_API_KEY, '"' + "805427569ce2035dcda0b99e4d984256" + '"'
            buildConfigField TYPE_BOOLEAN, IS_BETA, TRUE

            signingConfig signingConfigs.debug

            applicationIdSuffix ".debug"
            minifyEnabled false // when we hit the 0xffff method limit, switch this to true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
        beta {
            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.VERBOSE"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, TRUE
            buildConfigField TYPE_STRING, CLIENT_ID, '"' + "8d3c1664-05ae-47e4-bcdb-477489590aa4" + '"'
            buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "4f771f6f-5c10-4104-bbc6-3333f5b11bf9" + '"'
            buildConfigField TYPE_STRING, BASE_URL, '"' + "https://api.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "d62a169fe4856dea26f3a322750613a8" + '"'
            buildConfigField TYPE_BOOLEAN, IS_BETA, TRUE

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
        store {
            buildConfigField TYPE_INT, MIN_LOGGING_LEVEL, "android.util.Log.WARN"
            buildConfigField TYPE_BOOLEAN, DEBUG_SCREEN_ENABLED, FALSE
            buildConfigField TYPE_STRING, CLIENT_ID, '"' + "8d3c1664-05ae-47e4-bcdb-477489590aa4" + '"'
            buildConfigField TYPE_STRING, CLIENT_SECRET, '"' + "4f771f6f-5c10-4104-bbc6-3333f5b11bf9" + '"'
            buildConfigField TYPE_STRING, BASE_URL, '"' + "https://api.hello.is" + '"'
            buildConfigField TYPE_STRING, MP_API_KEY, '"' + "43c61cc553f0ccf2b3e1f73bc30bbfb4" + '"'
            buildConfigField TYPE_BOOLEAN, IS_BETA, FALSE

            signingConfig signingConfigs.release

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-deadcode-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'LICENSE'
        exclude 'LICENSE.txt'
    }
}

retrolambda {
    def javaHome = System.getenv('JAVA_HOME')
    if (javaHome != null) { // Manual, cross-platform
        jdk javaHome.trim()
    } else { // Magic, OS X only
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine "/usr/libexec/java_home", "-v", "1.8"
            standardOutput = stdout
        }
        jdk "$stdout".trim()
    }
}

/**
 * Zendesk doesn't pass Java 7 validation, so we have to turn off
 * verification on the JVM in order to run tests. If we remove
 * Zendesk from the project, remove this workaround. You will also
 * need to remove this from Android Studio's JUnit / Tests run
 * configurations. Workaround from
 * <a href="https://github.com/evant/android-studio-unit-test-plugin/issues/35">this bug</a>
 */
tasks.whenTaskAdded { theTask ->
    def taskName = theTask.name.toString()
    if ("testDebugUnitTest".toString().equals(taskName)) {
        /**
         * Listen for when robolectric adds the 'testDebug' task and when it does, add the -noverify
         * option to that task's jvmArgs.  This allows us to turn off byte code verification when
         * running our unit tests.
         */
        theTask.jvmArgs('-noverify')
    }
}

dependencies {
    // Is there anything we don't depend on?

    provided 'com.squareup.dagger:dagger-compiler:1.2.2'
    compile 'com.squareup.dagger:dagger:1.2.2'

    compile 'io.reactivex:rxjava:1.0.9'

    compile 'com.squareup.retrofit:retrofit:1.9.0'
    compile 'com.squareup.okhttp:okhttp-urlconnection:2.4.0'
    compile 'com.squareup.okhttp:okhttp:2.4.0'

    compile 'com.google.code.gson:gson:2.3.1'

    compile 'net.danlew:android.joda:2.7.2'
    compile "com.mixpanel.android:mixpanel-android:4.5.3"

    compile 'com.android.support:support-v4:23.1.0'
    compile 'com.android.support:support-v13:23.1.0'
    compile 'com.android.support:recyclerview-v7:23.1.0'
    compile 'com.android.support:customtabs:23.1.0'
    compile 'com.google.android.gms:play-services-gcm:8.1.0'
    compile 'com.google.android.gms:play-services-location:8.1.0'

    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'me.grantland:autofittextview:0.2.1'

    compile 'is.hello.commonsense:ble:1.1.9-SNAPSHOT'
    compile 'is.hello:anime-android-go-99:0.4.0'

    // !! If you remove this, remove the above workaround.
    compile('com.zendesk:sdk:1.4.1.1') {
        // When you remove this rule, you will also need to remove
        // `styles_zendesk.xml` and the first attr in `attrs.xml`.
        exclude group: 'com.android.support'
    }

    debugCompile 'net.hockeyapp.android:HockeySDK:3.5.0'


    // Necessary to be able to compile and run tests with
    // Android Studio 1.3 + build tools 1.3. Remove when
    // retrolambda releases an update.
    testCompile files(System.getenv('JAVA_HOME') + '/jre/lib/rt.jar')
    testCompile "org.robolectric:robolectric:3.0"
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.hamcrest:hamcrest-library:1.3'

    compile 'com.bugsnag:bugsnag-android:3.2.6'
}
