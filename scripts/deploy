#!/usr/bin/ruby

require 'json'
require 'colorize'
require 'optparse'

def last_command_failed?
  $?.to_i != 0
end

if ENV["HELLO_DEPLOY_HOCKEY_TOKEN"].nil?
  puts "! You must provide 'HELLO_DEPLOY_HOCKEY_TOKEN' in your ENV".red.bold
  puts "-> Generate an API token at https://rink.hockeyapp.net/manage/auth_tokens".green
  exit
end

options = OpenStruct.new
options.clean = false
options.tests = false
options.tag = nil
OptionParser.new do |opts|
  opts.banner = "Usage: #{File.basename $0} [options] flavors...".green

  opts.on("-t", "--[no-]tests", "Run test suite before uploading") do |t|
    options.tests = t
  end
  
  opts.on("-k", "--[no-]clean", "Clean the project before building") do |k|
    options.clean = k
  end
  
  opts.on("-sTAG", "--save-tag=TAG", "Tag the current branch contents") do |t|
    options.tag = t
  end
  
  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

end.parse!

flavor_names = ARGV
flavor_names << "beta" if flavor_names.empty?

flavors_path = File::join(File::dirname($0), "res", "deploy_conf.json")
flavors = JSON::parse(File::read(flavors_path))

current_branch = `git symbolic-ref --short HEAD`.chomp

puts "## Working on branch '#{current_branch}'".blue.bold

#region Cleaning

if options.clean
  puts "-> Cleaning".blue
  system "./gradlew clean"
  abort "!! Cleaning Failed".red.bold if last_command_failed?
  puts "-- Clean Completed".green
end

#endregion


#region Tests

if options.test
  puts "-> Building and running tests".blue
  system "./gradlew connectedCheck"
  abort "!! Tests Failed".red.bold if last_command_failed?
  puts "-- Tests Passed".green
end

#endregion


#region Building

flavor_names.each do |flavor_name|
  flavor = flavors[flavor_name]

  if flavor.nil?
    synonym = flavors["synonyms"][flavor_name]
    flavor = flavors[synonym]
    if flavor.nil?
      abort "!! Unknown build flavor `#{flavor_name}'".red.bold
    else
      flavor_name = synonym
    end
  end

  unless flavor["requires_branch"].nil?
    required_branch = flavor["requires_branch"]
    unless required_branch == current_branch
      abort "!! Flavor '#{flavor_name}' requires branch '#{required_branch}'".red.bold
    end
  end
  
  if flavor["block_main_branches"]
    if current_branch == "develop" || current_branch == "master"
      abort "!! Flavor '#{flavor_name}' cannot be deployed from main branch".red.bold
    end
  end

  #region Assembling

  puts "-> Assembling `#{flavor_name}' build".blue

  assemble_command = flavor["assemble_command"]
  system "./gradlew #{assemble_command}"
  abort "!! Build Failed".red.bold if last_command_failed?
  puts "-- Build Completed".green

  #endregion


  #region Uploading

  puts "-> Uploading to HockeyApp".blue

  apk_name = flavor["apk_name"]
  app_id = flavor["hockey_app_id"]
  hockey_token = ENV["HELLO_DEPLOY_HOCKEY_TOKEN"]
  file_name = "app/build/outputs/apk/#{apk_name}.apk"

  raw_response = `curl -X POST \
    -F "status=1" \
    -F "notify=0" \
    -F "ipa=@#{file_name}" \
    -H "X-HockeyAppToken: #{hockey_token}" \
    https://rink.hockeyapp.net/api/2/apps/#{app_id}/app_versions/upload`
  abort "!! Upload failed".red.bold if last_command_failed?
  puts "-- Upload completed".green

  response = JSON::parse(raw_response)
  config_url = response["config_url"]
  puts "-> Opening <#{config_url}>".blue
  system "open '#{config_url}'"

  #endregion


  #region Revealing

  if flavor["reveal"]
    puts "-> Revealing `#{file_name}'".blue
    system "open --reveal '#{file_name}'"
  end

  #endregion
end

#endregion

#region Tagging

unless options.tag.nil?
  puts "-> Creating git tag `#{options.tag}'".blue
  system "git tag '#{options.tag}'"
  system "git push origin --tags"
  abort "!! Creating git tag failed".red.bold if last_command_failed?
  puts "-- Created git tag".green
end

#endregion
